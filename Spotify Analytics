# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. What are the top 10 fastest songs based on tempo?

SELECT artist_name, track_name, tempo
FROM BIT_DB.Spotifydata
ORDER BY tempo desc LIMIT 10;

#2. What is the least popular song?

SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity asc LIMIT 1;

#3 What are the top 10 songs by danceability?

SELECT artist_name, track_name, danceability
FROM BIT_DB.Spotifydata
ORDER BY danceability desc limit 10;

#4. "What are the popular, good, mid, and flop tracks in the BIT_DB.spotifydata table based on their popularity ratings?"

SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata;

SELECT artist_name, track_name, CASE 
    WHEN popularity >= 90 THEN 'Popular'
    WHEN popularity >= 80 THEN 'Good'
    WHEN popularity >= 70 THEN 'Mid'
    ELSE 'Flop'
END AS Rating
FROM BIT_DB.spotifydata;
